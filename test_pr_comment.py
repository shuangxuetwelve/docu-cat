#!/usr/bin/env python3
"""
Test script for PR comment formatting
Demonstrates how DocuCat formats PR comments for different scenarios.
"""


def format_pr_comment(result: dict, config: dict, changed_files: list[str]) -> str:
    """
    Format a PR comment summarizing DocuCat's analysis and actions.

    Args:
        result: Analysis result dictionary from identify_and_update_documents
        config: DocuCat configuration dictionary
        changed_files: List of changed files in the PR

    Returns:
        Formatted comment in Markdown
    """
    comment = "## üê± DocuCat Summary\n\n"

    # Add configuration info
    comment += "**Configuration:**\n"
    comment += f"- Enabled: {'‚úÖ Yes' if config['enabled'] else '‚ùå No'}\n"
    comment += f"- Create Commits: {'‚úÖ Yes' if config['shouldCreateCommits'] else '‚ùå No'}\n\n"

    # Add changed files summary
    comment += f"**Changed Files ({len(changed_files)}):**\n"
    for file in changed_files[:10]:  # Limit to first 10 files
        comment += f"- `{file}`\n"
    if len(changed_files) > 10:
        comment += f"- ... and {len(changed_files) - 10} more\n"
    comment += "\n"

    # Add documentation update summary
    if result.get('no_updates_needed'):
        comment += "### ‚úÖ No Documentation Updates Needed\n\n"
        comment += "After analyzing the code changes, DocuCat determined that no documentation updates are required.\n"
    elif result.get('documents_updated'):
        docs = result['documents_updated']
        comment += f"### üìù Documentation Updated ({len(docs)})\n\n"
        comment += "The following documentation files were updated:\n\n"
        for doc in docs:
            comment += f"- ‚úÖ `{doc}`\n"
        comment += "\n"

        if config['shouldCreateCommits']:
            comment += "**Status:** Changes have been committed and pushed to this PR.\n"
        else:
            comment += "**Status:** Changes were analyzed but not committed (as per configuration).\n"
    else:
        comment += "### ‚ÑπÔ∏è Analysis Complete\n\n"
        comment += "DocuCat completed its analysis but no documentation files were updated.\n"

    # Add footer
    comment += "\n---\n"
    comment += "*ü§ñ This comment was automatically generated by [DocuCat](https://github.com/lu/docu-cat) using Claude Haiku 4.5*\n"

    return comment


def test_comment_scenarios():
    """Test various PR comment scenarios."""

    print("=" * 70)
    print("PR Comment Formatting - Test Cases")
    print("=" * 70)
    print()

    # Scenario 1: Documents updated with commits
    print("Scenario 1: Documents Updated (with commits)")
    print("-" * 70)
    result1 = {
        'analysis': 'Code changes detected in authentication module.',
        'documents_updated': ['README.md', 'docs/api.md'],
        'no_updates_needed': False
    }
    config1 = {'enabled': True, 'shouldCreateCommits': True}
    changed_files1 = ['src/auth.py', 'src/login.py', 'tests/test_auth.py']

    comment1 = format_pr_comment(result1, config1, changed_files1)
    print(comment1)
    print()
    print()

    # Scenario 2: No documentation updates needed
    print("Scenario 2: No Documentation Updates Needed")
    print("-" * 70)
    result2 = {
        'analysis': 'Minor code refactoring with no API changes.',
        'documents_updated': [],
        'no_updates_needed': True
    }
    config2 = {'enabled': True, 'shouldCreateCommits': True}
    changed_files2 = ['src/utils.py']

    comment2 = format_pr_comment(result2, config2, changed_files2)
    print(comment2)
    print()
    print()

    # Scenario 3: Documents updated but no commits (analyze only)
    print("Scenario 3: Documents Updated (no commits - analyze only)")
    print("-" * 70)
    result3 = {
        'analysis': 'API changes detected.',
        'documents_updated': ['docs/api.md', 'CHANGELOG.md'],
        'no_updates_needed': False
    }
    config3 = {'enabled': True, 'shouldCreateCommits': False}
    changed_files3 = ['src/api/endpoints.py', 'src/api/models.py']

    comment3 = format_pr_comment(result3, config3, changed_files3)
    print(comment3)
    print()
    print()

    # Scenario 4: Many changed files
    print("Scenario 4: Many Changed Files (showing truncation)")
    print("-" * 70)
    result4 = {
        'analysis': 'Large refactoring across multiple modules.',
        'documents_updated': ['README.md'],
        'no_updates_needed': False
    }
    config4 = {'enabled': True, 'shouldCreateCommits': True}
    changed_files4 = [
        f'src/module{i}.py' for i in range(1, 16)
    ]  # 15 files

    comment4 = format_pr_comment(result4, config4, changed_files4)
    print(comment4)
    print()
    print()

    print("=" * 70)
    print("All test scenarios completed!")
    print("=" * 70)


if __name__ == '__main__':
    test_comment_scenarios()
