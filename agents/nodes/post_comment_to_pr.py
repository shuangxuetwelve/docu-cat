import urllib.request
import json
import sys

from langchain_core.messages import AIMessage
from agents.docu_cat_state import DocuCatState
from agents.utils import getResultFromMessages

def format_pr_comment(state: DocuCatState) -> str:
    """
    Format a PR comment summarizing DocuCat's analysis and actions.

    Args:
        state: DocuCat state

    Returns:
        Formatted comment in Markdown
    """
    changed_files = state.get("changed_files")
    config = state.get("config", {})
    messages = state.get("messages", [])
    result = getResultFromMessages(messages)
    
    comment = "## üê± DocuCat Summary\n\n"

    # Add changed files summary
    comment += f"**Changed Files ({len(changed_files)}):**\n"
    for file in changed_files[:10]:  # Limit to first 10 files
        comment += f"- `{file}`\n"
    if len(changed_files) > 10:
        comment += f"- ... and {len(changed_files) - 10} more\n"
    comment += "\n"

    # Add analysis section
    if result.get('analysis'):
        comment += "### üîç Analysis\n\n"
        comment += result['analysis'] + "\n\n"

    # Add documentation update summary
    if result.get('no_updates_needed'):
        comment += "### ‚úÖ No Documentation Updates Needed\n\n"
        comment += "After analyzing the code changes, DocuCat determined that no documentation updates are required.\n"
    elif result.get('documents_updated'):
        docs = result['documents_updated']
        comment += f"### üìù Documentation Updated ({len(docs)})\n\n"
        comment += "The following documentation files were updated:\n\n"
        for doc in docs:
            comment += f"- ‚úÖ `{doc}`\n"
        comment += "\n"

        if config['shouldCreateCommits']:
            comment += "**Status:** Changes have been committed and pushed to this PR.\n"
        else:
            comment += "**Status:** Changes were analyzed but not committed (as per configuration).\n"
    else:
        comment += "### ‚ÑπÔ∏è Analysis Complete\n\n"
        comment += "DocuCat completed its analysis but no documentation files were updated.\n"

    # Add footer
    comment += "\n---\n"
    comment += "*ü§ñ This comment was automatically generated by [DocuCat](https://github.com/lu/docu-cat) using Claude Haiku 4.5*\n"

    return comment

def post_comment_to_pr(state: DocuCatState):
    """
    Post a comment to a GitHub pull request.

    Args:
        token: GitHub API token
        repository: Repository in format 'owner/repo'
        pr_number: Pull request number
        comment_body: The comment text in Markdown format

    Returns:
        bool: True if successful, False otherwise
    """
    token = state.get("token")
    repository = state.get("repository")
    pr_number = state.get("pr_number")
    comment_body = format_pr_comment(state)

    url = f"https://api.github.com/repos/{repository}/issues/{pr_number}/comments"

    headers = {
        'Authorization': f'token {token}',
        'Accept': 'application/vnd.github.v3+json',
        'User-Agent': 'DocuCat-Action',
        'Content-Type': 'application/json'
    }

    data = json.dumps({'body': comment_body}).encode('utf-8')

    try:
        req = urllib.request.Request(url, data=data, headers=headers, method='POST')
        with urllib.request.urlopen(req) as response:
            if response.status == 201:
                print("‚úÖ Comment posted to PR successfully")
            else:
                print(f"‚ö†Ô∏è  Unexpected response status: {response.status}")
    except urllib.error.HTTPError as e:
        print(f"‚ùå Error posting comment: {e.code} {e.reason}", file=sys.stderr)
        error_body = e.read().decode()
        print(f"   Response: {error_body}", file=sys.stderr)
    except Exception as e:
        print(f"‚ùå Error posting comment: {e}", file=sys.stderr)
